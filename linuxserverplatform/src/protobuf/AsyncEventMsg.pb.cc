// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AsyncEventMsg.proto

#include "AsyncEventMsg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_AsyncEventMsg_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AsyncEventMsg_Test_User_AsyncEventMsg_2eproto;
namespace AsyncEventMsg {
class AsyncEventMsg_Test_UserDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AsyncEventMsg_Test_User> _instance;
} _AsyncEventMsg_Test_User_default_instance_;
class AsyncEventMsg_TestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AsyncEventMsg_Test> _instance;
} _AsyncEventMsg_Test_default_instance_;
}  // namespace AsyncEventMsg
static void InitDefaultsscc_info_AsyncEventMsg_Test_AsyncEventMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AsyncEventMsg::_AsyncEventMsg_Test_default_instance_;
    new (ptr) ::AsyncEventMsg::AsyncEventMsg_Test();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AsyncEventMsg::AsyncEventMsg_Test::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AsyncEventMsg_Test_AsyncEventMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AsyncEventMsg_Test_AsyncEventMsg_2eproto}, {
      &scc_info_AsyncEventMsg_Test_User_AsyncEventMsg_2eproto.base,}};

static void InitDefaultsscc_info_AsyncEventMsg_Test_User_AsyncEventMsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::AsyncEventMsg::_AsyncEventMsg_Test_User_default_instance_;
    new (ptr) ::AsyncEventMsg::AsyncEventMsg_Test_User();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::AsyncEventMsg::AsyncEventMsg_Test_User::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AsyncEventMsg_Test_User_AsyncEventMsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AsyncEventMsg_Test_User_AsyncEventMsg_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_AsyncEventMsg_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_AsyncEventMsg_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_AsyncEventMsg_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_AsyncEventMsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AsyncEventMsg::AsyncEventMsg_Test_User, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AsyncEventMsg::AsyncEventMsg_Test_User, userid_),
  PROTOBUF_FIELD_OFFSET(::AsyncEventMsg::AsyncEventMsg_Test_User, name_),
  PROTOBUF_FIELD_OFFSET(::AsyncEventMsg::AsyncEventMsg_Test_User, headurl_),
  PROTOBUF_FIELD_OFFSET(::AsyncEventMsg::AsyncEventMsg_Test_User, money_),
  PROTOBUF_FIELD_OFFSET(::AsyncEventMsg::AsyncEventMsg_Test_User, wincount_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AsyncEventMsg::AsyncEventMsg_Test, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::AsyncEventMsg::AsyncEventMsg_Test, user_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::AsyncEventMsg::AsyncEventMsg_Test_User)},
  { 10, -1, sizeof(::AsyncEventMsg::AsyncEventMsg_Test)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AsyncEventMsg::_AsyncEventMsg_Test_User_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::AsyncEventMsg::_AsyncEventMsg_Test_default_instance_),
};

const char descriptor_table_protodef_AsyncEventMsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023AsyncEventMsg.proto\022\rAsyncEventMsg\"i\n\027"
  "AsyncEventMsg_Test_User\022\016\n\006userID\030\001 \001(\005\022"
  "\014\n\004name\030\002 \001(\t\022\017\n\007headURL\030\003 \001(\t\022\r\n\005money\030"
  "\004 \001(\003\022\020\n\010winCount\030\005 \001(\005\"J\n\022AsyncEventMsg"
  "_Test\0224\n\004user\030\001 \003(\0132&.AsyncEventMsg.Asyn"
  "cEventMsg_Test_Userb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_AsyncEventMsg_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_AsyncEventMsg_2eproto_sccs[2] = {
  &scc_info_AsyncEventMsg_Test_AsyncEventMsg_2eproto.base,
  &scc_info_AsyncEventMsg_Test_User_AsyncEventMsg_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_AsyncEventMsg_2eproto_once;
static bool descriptor_table_AsyncEventMsg_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_AsyncEventMsg_2eproto = {
  &descriptor_table_AsyncEventMsg_2eproto_initialized, descriptor_table_protodef_AsyncEventMsg_2eproto, "AsyncEventMsg.proto", 227,
  &descriptor_table_AsyncEventMsg_2eproto_once, descriptor_table_AsyncEventMsg_2eproto_sccs, descriptor_table_AsyncEventMsg_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_AsyncEventMsg_2eproto::offsets,
  file_level_metadata_AsyncEventMsg_2eproto, 2, file_level_enum_descriptors_AsyncEventMsg_2eproto, file_level_service_descriptors_AsyncEventMsg_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_AsyncEventMsg_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_AsyncEventMsg_2eproto), true);
namespace AsyncEventMsg {

// ===================================================================

void AsyncEventMsg_Test_User::InitAsDefaultInstance() {
}
class AsyncEventMsg_Test_User::_Internal {
 public:
};

AsyncEventMsg_Test_User::AsyncEventMsg_Test_User()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AsyncEventMsg.AsyncEventMsg_Test_User)
}
AsyncEventMsg_Test_User::AsyncEventMsg_Test_User(const AsyncEventMsg_Test_User& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  headurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_headurl().empty()) {
    headurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.headurl_);
  }
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&money_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(money_));
  // @@protoc_insertion_point(copy_constructor:AsyncEventMsg.AsyncEventMsg_Test_User)
}

void AsyncEventMsg_Test_User::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AsyncEventMsg_Test_User_AsyncEventMsg_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  headurl_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&money_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(money_));
}

AsyncEventMsg_Test_User::~AsyncEventMsg_Test_User() {
  // @@protoc_insertion_point(destructor:AsyncEventMsg.AsyncEventMsg_Test_User)
  SharedDtor();
}

void AsyncEventMsg_Test_User::SharedDtor() {
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  headurl_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AsyncEventMsg_Test_User::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AsyncEventMsg_Test_User& AsyncEventMsg_Test_User::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AsyncEventMsg_Test_User_AsyncEventMsg_2eproto.base);
  return *internal_default_instance();
}


void AsyncEventMsg_Test_User::Clear() {
// @@protoc_insertion_point(message_clear_start:AsyncEventMsg.AsyncEventMsg_Test_User)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  headurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&userid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&money_) -
      reinterpret_cast<char*>(&userid_)) + sizeof(money_));
  _internal_metadata_.Clear();
}

const char* AsyncEventMsg_Test_User::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 userID = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_name(), ptr, ctx, "AsyncEventMsg.AsyncEventMsg_Test_User.name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string headURL = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_headurl(), ptr, ctx, "AsyncEventMsg.AsyncEventMsg_Test_User.headURL");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 money = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          money_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 winCount = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          wincount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AsyncEventMsg_Test_User::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AsyncEventMsg.AsyncEventMsg_Test_User)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 userID = 1;
  if (this->userid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_userid(), target);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AsyncEventMsg.AsyncEventMsg_Test_User.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string headURL = 3;
  if (this->headurl().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_headurl().data(), static_cast<int>(this->_internal_headurl().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "AsyncEventMsg.AsyncEventMsg_Test_User.headURL");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_headurl(), target);
  }

  // int64 money = 4;
  if (this->money() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_money(), target);
  }

  // int32 winCount = 5;
  if (this->wincount() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_wincount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AsyncEventMsg.AsyncEventMsg_Test_User)
  return target;
}

size_t AsyncEventMsg_Test_User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AsyncEventMsg.AsyncEventMsg_Test_User)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string headURL = 3;
  if (this->headurl().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_headurl());
  }

  // int32 userID = 1;
  if (this->userid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_userid());
  }

  // int32 winCount = 5;
  if (this->wincount() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_wincount());
  }

  // int64 money = 4;
  if (this->money() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_money());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AsyncEventMsg_Test_User::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AsyncEventMsg.AsyncEventMsg_Test_User)
  GOOGLE_DCHECK_NE(&from, this);
  const AsyncEventMsg_Test_User* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AsyncEventMsg_Test_User>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AsyncEventMsg.AsyncEventMsg_Test_User)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AsyncEventMsg.AsyncEventMsg_Test_User)
    MergeFrom(*source);
  }
}

void AsyncEventMsg_Test_User::MergeFrom(const AsyncEventMsg_Test_User& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AsyncEventMsg.AsyncEventMsg_Test_User)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.headurl().size() > 0) {

    headurl_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.headurl_);
  }
  if (from.userid() != 0) {
    _internal_set_userid(from._internal_userid());
  }
  if (from.wincount() != 0) {
    _internal_set_wincount(from._internal_wincount());
  }
  if (from.money() != 0) {
    _internal_set_money(from._internal_money());
  }
}

void AsyncEventMsg_Test_User::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AsyncEventMsg.AsyncEventMsg_Test_User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AsyncEventMsg_Test_User::CopyFrom(const AsyncEventMsg_Test_User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AsyncEventMsg.AsyncEventMsg_Test_User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AsyncEventMsg_Test_User::IsInitialized() const {
  return true;
}

void AsyncEventMsg_Test_User::InternalSwap(AsyncEventMsg_Test_User* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  headurl_.Swap(&other->headurl_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(userid_, other->userid_);
  swap(wincount_, other->wincount_);
  swap(money_, other->money_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AsyncEventMsg_Test_User::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AsyncEventMsg_Test::InitAsDefaultInstance() {
}
class AsyncEventMsg_Test::_Internal {
 public:
};

AsyncEventMsg_Test::AsyncEventMsg_Test()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:AsyncEventMsg.AsyncEventMsg_Test)
}
AsyncEventMsg_Test::AsyncEventMsg_Test(const AsyncEventMsg_Test& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      user_(from.user_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:AsyncEventMsg.AsyncEventMsg_Test)
}

void AsyncEventMsg_Test::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AsyncEventMsg_Test_AsyncEventMsg_2eproto.base);
}

AsyncEventMsg_Test::~AsyncEventMsg_Test() {
  // @@protoc_insertion_point(destructor:AsyncEventMsg.AsyncEventMsg_Test)
  SharedDtor();
}

void AsyncEventMsg_Test::SharedDtor() {
}

void AsyncEventMsg_Test::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AsyncEventMsg_Test& AsyncEventMsg_Test::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AsyncEventMsg_Test_AsyncEventMsg_2eproto.base);
  return *internal_default_instance();
}


void AsyncEventMsg_Test::Clear() {
// @@protoc_insertion_point(message_clear_start:AsyncEventMsg.AsyncEventMsg_Test)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_.Clear();
  _internal_metadata_.Clear();
}

const char* AsyncEventMsg_Test::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .AsyncEventMsg.AsyncEventMsg_Test_User user = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_user(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AsyncEventMsg_Test::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AsyncEventMsg.AsyncEventMsg_Test)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .AsyncEventMsg.AsyncEventMsg_Test_User user = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_user_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_user(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AsyncEventMsg.AsyncEventMsg_Test)
  return target;
}

size_t AsyncEventMsg_Test::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AsyncEventMsg.AsyncEventMsg_Test)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .AsyncEventMsg.AsyncEventMsg_Test_User user = 1;
  total_size += 1UL * this->_internal_user_size();
  for (const auto& msg : this->user_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AsyncEventMsg_Test::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:AsyncEventMsg.AsyncEventMsg_Test)
  GOOGLE_DCHECK_NE(&from, this);
  const AsyncEventMsg_Test* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AsyncEventMsg_Test>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:AsyncEventMsg.AsyncEventMsg_Test)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:AsyncEventMsg.AsyncEventMsg_Test)
    MergeFrom(*source);
  }
}

void AsyncEventMsg_Test::MergeFrom(const AsyncEventMsg_Test& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AsyncEventMsg.AsyncEventMsg_Test)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  user_.MergeFrom(from.user_);
}

void AsyncEventMsg_Test::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:AsyncEventMsg.AsyncEventMsg_Test)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AsyncEventMsg_Test::CopyFrom(const AsyncEventMsg_Test& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AsyncEventMsg.AsyncEventMsg_Test)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AsyncEventMsg_Test::IsInitialized() const {
  return true;
}

void AsyncEventMsg_Test::InternalSwap(AsyncEventMsg_Test* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  user_.InternalSwap(&other->user_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AsyncEventMsg_Test::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace AsyncEventMsg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::AsyncEventMsg::AsyncEventMsg_Test_User* Arena::CreateMaybeMessage< ::AsyncEventMsg::AsyncEventMsg_Test_User >(Arena* arena) {
  return Arena::CreateInternal< ::AsyncEventMsg::AsyncEventMsg_Test_User >(arena);
}
template<> PROTOBUF_NOINLINE ::AsyncEventMsg::AsyncEventMsg_Test* Arena::CreateMaybeMessage< ::AsyncEventMsg::AsyncEventMsg_Test >(Arena* arena) {
  return Arena::CreateInternal< ::AsyncEventMsg::AsyncEventMsg_Test >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
