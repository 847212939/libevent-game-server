// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: AsyncEventMsg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_AsyncEventMsg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_AsyncEventMsg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>


#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_AsyncEventMsg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_AsyncEventMsg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_AsyncEventMsg_2eproto;
namespace AsyncEventMsg {
class AsyncEventMsg_Test;
class AsyncEventMsg_TestDefaultTypeInternal;
extern AsyncEventMsg_TestDefaultTypeInternal _AsyncEventMsg_Test_default_instance_;
class AsyncEventMsg_Test_User;
class AsyncEventMsg_Test_UserDefaultTypeInternal;
extern AsyncEventMsg_Test_UserDefaultTypeInternal _AsyncEventMsg_Test_User_default_instance_;
}  // namespace AsyncEventMsg
PROTOBUF_NAMESPACE_OPEN
template<> ::AsyncEventMsg::AsyncEventMsg_Test* Arena::CreateMaybeMessage<::AsyncEventMsg::AsyncEventMsg_Test>(Arena*);
template<> ::AsyncEventMsg::AsyncEventMsg_Test_User* Arena::CreateMaybeMessage<::AsyncEventMsg::AsyncEventMsg_Test_User>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace AsyncEventMsg {

// ===================================================================

class AsyncEventMsg_Test_User :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AsyncEventMsg.AsyncEventMsg_Test_User) */ {
 public:
  AsyncEventMsg_Test_User();
  virtual ~AsyncEventMsg_Test_User();

  AsyncEventMsg_Test_User(const AsyncEventMsg_Test_User& from);
  AsyncEventMsg_Test_User(AsyncEventMsg_Test_User&& from) noexcept
    : AsyncEventMsg_Test_User() {
    *this = ::std::move(from);
  }

  inline AsyncEventMsg_Test_User& operator=(const AsyncEventMsg_Test_User& from) {
    CopyFrom(from);
    return *this;
  }
  inline AsyncEventMsg_Test_User& operator=(AsyncEventMsg_Test_User&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AsyncEventMsg_Test_User& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AsyncEventMsg_Test_User* internal_default_instance() {
    return reinterpret_cast<const AsyncEventMsg_Test_User*>(
               &_AsyncEventMsg_Test_User_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AsyncEventMsg_Test_User& a, AsyncEventMsg_Test_User& b) {
    a.Swap(&b);
  }
  inline void Swap(AsyncEventMsg_Test_User* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AsyncEventMsg_Test_User* New() const final {
    return CreateMaybeMessage<AsyncEventMsg_Test_User>(nullptr);
  }

  AsyncEventMsg_Test_User* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AsyncEventMsg_Test_User>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AsyncEventMsg_Test_User& from);
  void MergeFrom(const AsyncEventMsg_Test_User& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AsyncEventMsg_Test_User* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AsyncEventMsg.AsyncEventMsg_Test_User";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_AsyncEventMsg_2eproto);
    return ::descriptor_table_AsyncEventMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kHeadURLFieldNumber = 3,
    kUserIDFieldNumber = 1,
    kWinCountFieldNumber = 5,
    kMoneyFieldNumber = 4,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string headURL = 3;
  void clear_headurl();
  const std::string& headurl() const;
  void set_headurl(const std::string& value);
  void set_headurl(std::string&& value);
  void set_headurl(const char* value);
  void set_headurl(const char* value, size_t size);
  std::string* mutable_headurl();
  std::string* release_headurl();
  void set_allocated_headurl(std::string* headurl);
  private:
  const std::string& _internal_headurl() const;
  void _internal_set_headurl(const std::string& value);
  std::string* _internal_mutable_headurl();
  public:

  // int32 userID = 1;
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 winCount = 5;
  void clear_wincount();
  ::PROTOBUF_NAMESPACE_ID::int32 wincount() const;
  void set_wincount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wincount() const;
  void _internal_set_wincount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 money = 4;
  void clear_money();
  ::PROTOBUF_NAMESPACE_ID::int64 money() const;
  void set_money(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_money() const;
  void _internal_set_money(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:AsyncEventMsg.AsyncEventMsg_Test_User)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr headurl_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  ::PROTOBUF_NAMESPACE_ID::int32 wincount_;
  ::PROTOBUF_NAMESPACE_ID::int64 money_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AsyncEventMsg_2eproto;
};
// -------------------------------------------------------------------

class AsyncEventMsg_Test :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:AsyncEventMsg.AsyncEventMsg_Test) */ {
 public:
  AsyncEventMsg_Test();
  virtual ~AsyncEventMsg_Test();

  AsyncEventMsg_Test(const AsyncEventMsg_Test& from);
  AsyncEventMsg_Test(AsyncEventMsg_Test&& from) noexcept
    : AsyncEventMsg_Test() {
    *this = ::std::move(from);
  }

  inline AsyncEventMsg_Test& operator=(const AsyncEventMsg_Test& from) {
    CopyFrom(from);
    return *this;
  }
  inline AsyncEventMsg_Test& operator=(AsyncEventMsg_Test&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AsyncEventMsg_Test& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AsyncEventMsg_Test* internal_default_instance() {
    return reinterpret_cast<const AsyncEventMsg_Test*>(
               &_AsyncEventMsg_Test_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AsyncEventMsg_Test& a, AsyncEventMsg_Test& b) {
    a.Swap(&b);
  }
  inline void Swap(AsyncEventMsg_Test* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AsyncEventMsg_Test* New() const final {
    return CreateMaybeMessage<AsyncEventMsg_Test>(nullptr);
  }

  AsyncEventMsg_Test* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AsyncEventMsg_Test>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AsyncEventMsg_Test& from);
  void MergeFrom(const AsyncEventMsg_Test& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AsyncEventMsg_Test* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "AsyncEventMsg.AsyncEventMsg_Test";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_AsyncEventMsg_2eproto);
    return ::descriptor_table_AsyncEventMsg_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserFieldNumber = 1,
  };
  // repeated .AsyncEventMsg.AsyncEventMsg_Test_User user = 1;
  int user_size() const;
  private:
  int _internal_user_size() const;
  public:
  void clear_user();
  ::AsyncEventMsg::AsyncEventMsg_Test_User* mutable_user(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AsyncEventMsg::AsyncEventMsg_Test_User >*
      mutable_user();
  private:
  const ::AsyncEventMsg::AsyncEventMsg_Test_User& _internal_user(int index) const;
  ::AsyncEventMsg::AsyncEventMsg_Test_User* _internal_add_user();
  public:
  const ::AsyncEventMsg::AsyncEventMsg_Test_User& user(int index) const;
  ::AsyncEventMsg::AsyncEventMsg_Test_User* add_user();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AsyncEventMsg::AsyncEventMsg_Test_User >&
      user() const;

  // @@protoc_insertion_point(class_scope:AsyncEventMsg.AsyncEventMsg_Test)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AsyncEventMsg::AsyncEventMsg_Test_User > user_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_AsyncEventMsg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AsyncEventMsg_Test_User

// int32 userID = 1;
inline void AsyncEventMsg_Test_User::clear_userid() {
  userid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AsyncEventMsg_Test_User::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AsyncEventMsg_Test_User::userid() const {
  // @@protoc_insertion_point(field_get:AsyncEventMsg.AsyncEventMsg_Test_User.userID)
  return _internal_userid();
}
inline void AsyncEventMsg_Test_User::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  userid_ = value;
}
inline void AsyncEventMsg_Test_User::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:AsyncEventMsg.AsyncEventMsg_Test_User.userID)
}

// string name = 2;
inline void AsyncEventMsg_Test_User::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AsyncEventMsg_Test_User::name() const {
  // @@protoc_insertion_point(field_get:AsyncEventMsg.AsyncEventMsg_Test_User.name)
  return _internal_name();
}
inline void AsyncEventMsg_Test_User::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:AsyncEventMsg.AsyncEventMsg_Test_User.name)
}
inline std::string* AsyncEventMsg_Test_User::mutable_name() {
  // @@protoc_insertion_point(field_mutable:AsyncEventMsg.AsyncEventMsg_Test_User.name)
  return _internal_mutable_name();
}
inline const std::string& AsyncEventMsg_Test_User::_internal_name() const {
  return name_.GetNoArena();
}
inline void AsyncEventMsg_Test_User::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AsyncEventMsg_Test_User::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AsyncEventMsg.AsyncEventMsg_Test_User.name)
}
inline void AsyncEventMsg_Test_User::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AsyncEventMsg.AsyncEventMsg_Test_User.name)
}
inline void AsyncEventMsg_Test_User::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AsyncEventMsg.AsyncEventMsg_Test_User.name)
}
inline std::string* AsyncEventMsg_Test_User::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AsyncEventMsg_Test_User::release_name() {
  // @@protoc_insertion_point(field_release:AsyncEventMsg.AsyncEventMsg_Test_User.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AsyncEventMsg_Test_User::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:AsyncEventMsg.AsyncEventMsg_Test_User.name)
}

// string headURL = 3;
inline void AsyncEventMsg_Test_User::clear_headurl() {
  headurl_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& AsyncEventMsg_Test_User::headurl() const {
  // @@protoc_insertion_point(field_get:AsyncEventMsg.AsyncEventMsg_Test_User.headURL)
  return _internal_headurl();
}
inline void AsyncEventMsg_Test_User::set_headurl(const std::string& value) {
  _internal_set_headurl(value);
  // @@protoc_insertion_point(field_set:AsyncEventMsg.AsyncEventMsg_Test_User.headURL)
}
inline std::string* AsyncEventMsg_Test_User::mutable_headurl() {
  // @@protoc_insertion_point(field_mutable:AsyncEventMsg.AsyncEventMsg_Test_User.headURL)
  return _internal_mutable_headurl();
}
inline const std::string& AsyncEventMsg_Test_User::_internal_headurl() const {
  return headurl_.GetNoArena();
}
inline void AsyncEventMsg_Test_User::_internal_set_headurl(const std::string& value) {
  
  headurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void AsyncEventMsg_Test_User::set_headurl(std::string&& value) {
  
  headurl_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:AsyncEventMsg.AsyncEventMsg_Test_User.headURL)
}
inline void AsyncEventMsg_Test_User::set_headurl(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  headurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:AsyncEventMsg.AsyncEventMsg_Test_User.headURL)
}
inline void AsyncEventMsg_Test_User::set_headurl(const char* value, size_t size) {
  
  headurl_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:AsyncEventMsg.AsyncEventMsg_Test_User.headURL)
}
inline std::string* AsyncEventMsg_Test_User::_internal_mutable_headurl() {
  
  return headurl_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* AsyncEventMsg_Test_User::release_headurl() {
  // @@protoc_insertion_point(field_release:AsyncEventMsg.AsyncEventMsg_Test_User.headURL)
  
  return headurl_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void AsyncEventMsg_Test_User::set_allocated_headurl(std::string* headurl) {
  if (headurl != nullptr) {
    
  } else {
    
  }
  headurl_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), headurl);
  // @@protoc_insertion_point(field_set_allocated:AsyncEventMsg.AsyncEventMsg_Test_User.headURL)
}

// int64 money = 4;
inline void AsyncEventMsg_Test_User::clear_money() {
  money_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AsyncEventMsg_Test_User::_internal_money() const {
  return money_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AsyncEventMsg_Test_User::money() const {
  // @@protoc_insertion_point(field_get:AsyncEventMsg.AsyncEventMsg_Test_User.money)
  return _internal_money();
}
inline void AsyncEventMsg_Test_User::_internal_set_money(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  money_ = value;
}
inline void AsyncEventMsg_Test_User::set_money(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_money(value);
  // @@protoc_insertion_point(field_set:AsyncEventMsg.AsyncEventMsg_Test_User.money)
}

// int32 winCount = 5;
inline void AsyncEventMsg_Test_User::clear_wincount() {
  wincount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AsyncEventMsg_Test_User::_internal_wincount() const {
  return wincount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AsyncEventMsg_Test_User::wincount() const {
  // @@protoc_insertion_point(field_get:AsyncEventMsg.AsyncEventMsg_Test_User.winCount)
  return _internal_wincount();
}
inline void AsyncEventMsg_Test_User::_internal_set_wincount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wincount_ = value;
}
inline void AsyncEventMsg_Test_User::set_wincount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wincount(value);
  // @@protoc_insertion_point(field_set:AsyncEventMsg.AsyncEventMsg_Test_User.winCount)
}

// -------------------------------------------------------------------

// AsyncEventMsg_Test

// repeated .AsyncEventMsg.AsyncEventMsg_Test_User user = 1;
inline int AsyncEventMsg_Test::_internal_user_size() const {
  return user_.size();
}
inline int AsyncEventMsg_Test::user_size() const {
  return _internal_user_size();
}
inline void AsyncEventMsg_Test::clear_user() {
  user_.Clear();
}
inline ::AsyncEventMsg::AsyncEventMsg_Test_User* AsyncEventMsg_Test::mutable_user(int index) {
  // @@protoc_insertion_point(field_mutable:AsyncEventMsg.AsyncEventMsg_Test.user)
  return user_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AsyncEventMsg::AsyncEventMsg_Test_User >*
AsyncEventMsg_Test::mutable_user() {
  // @@protoc_insertion_point(field_mutable_list:AsyncEventMsg.AsyncEventMsg_Test.user)
  return &user_;
}
inline const ::AsyncEventMsg::AsyncEventMsg_Test_User& AsyncEventMsg_Test::_internal_user(int index) const {
  return user_.Get(index);
}
inline const ::AsyncEventMsg::AsyncEventMsg_Test_User& AsyncEventMsg_Test::user(int index) const {
  // @@protoc_insertion_point(field_get:AsyncEventMsg.AsyncEventMsg_Test.user)
  return _internal_user(index);
}
inline ::AsyncEventMsg::AsyncEventMsg_Test_User* AsyncEventMsg_Test::_internal_add_user() {
  return user_.Add();
}
inline ::AsyncEventMsg::AsyncEventMsg_Test_User* AsyncEventMsg_Test::add_user() {
  // @@protoc_insertion_point(field_add:AsyncEventMsg.AsyncEventMsg_Test.user)
  return _internal_add_user();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::AsyncEventMsg::AsyncEventMsg_Test_User >&
AsyncEventMsg_Test::user() const {
  // @@protoc_insertion_point(field_list:AsyncEventMsg.AsyncEventMsg_Test.user)
  return user_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace AsyncEventMsg

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_AsyncEventMsg_2eproto
