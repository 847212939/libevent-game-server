// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test1.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_test1_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_test1_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>


#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_test1_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_test1_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_test1_2eproto;
namespace test1 {
class Student1;
class Student1DefaultTypeInternal;
extern Student1DefaultTypeInternal _Student1_default_instance_;
class Team1;
class Team1DefaultTypeInternal;
extern Team1DefaultTypeInternal _Team1_default_instance_;
}  // namespace test1
PROTOBUF_NAMESPACE_OPEN
template<> ::test1::Student1* Arena::CreateMaybeMessage<::test1::Student1>(Arena*);
template<> ::test1::Team1* Arena::CreateMaybeMessage<::test1::Team1>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace test1 {

enum Sex1 : int {
  BOY = 0,
  GIRL = 1,
  Sex1_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Sex1_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Sex1_IsValid(int value);
constexpr Sex1 Sex1_MIN = BOY;
constexpr Sex1 Sex1_MAX = GIRL;
constexpr int Sex1_ARRAYSIZE = Sex1_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Sex1_descriptor();
template<typename T>
inline const std::string& Sex1_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Sex1>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Sex1_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Sex1_descriptor(), enum_t_value);
}
inline bool Sex1_Parse(
    const std::string& name, Sex1* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Sex1>(
    Sex1_descriptor(), name, value);
}
// ===================================================================

class Student1 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test1.Student1) */ {
 public:
  Student1();
  virtual ~Student1();

  Student1(const Student1& from);
  Student1(Student1&& from) noexcept
    : Student1() {
    *this = ::std::move(from);
  }

  inline Student1& operator=(const Student1& from) {
    CopyFrom(from);
    return *this;
  }
  inline Student1& operator=(Student1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Student1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Student1* internal_default_instance() {
    return reinterpret_cast<const Student1*>(
               &_Student1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Student1& a, Student1& b) {
    a.Swap(&b);
  }
  inline void Swap(Student1* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Student1* New() const final {
    return CreateMaybeMessage<Student1>(nullptr);
  }

  Student1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Student1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Student1& from);
  void MergeFrom(const Student1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Student1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test1.Student1";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test1_2eproto);
    return ::descriptor_table_test1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
    kSexFieldNumber = 3,
  };
  // string Name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 Id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .test1.Sex1 Sex = 3;
  void clear_sex();
  ::test1::Sex1 sex() const;
  void set_sex(::test1::Sex1 value);
  private:
  ::test1::Sex1 _internal_sex() const;
  void _internal_set_sex(::test1::Sex1 value);
  public:

  // @@protoc_insertion_point(class_scope:test1.Student1)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  int sex_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test1_2eproto;
};
// -------------------------------------------------------------------

class Team1 :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test1.Team1) */ {
 public:
  Team1();
  virtual ~Team1();

  Team1(const Team1& from);
  Team1(Team1&& from) noexcept
    : Team1() {
    *this = ::std::move(from);
  }

  inline Team1& operator=(const Team1& from) {
    CopyFrom(from);
    return *this;
  }
  inline Team1& operator=(Team1&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Team1& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Team1* internal_default_instance() {
    return reinterpret_cast<const Team1*>(
               &_Team1_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Team1& a, Team1& b) {
    a.Swap(&b);
  }
  inline void Swap(Team1* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Team1* New() const final {
    return CreateMaybeMessage<Team1>(nullptr);
  }

  Team1* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Team1>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Team1& from);
  void MergeFrom(const Team1& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Team1* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test1.Team1";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_test1_2eproto);
    return ::descriptor_table_test1_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStudentFieldNumber = 4,
    kNameFieldNumber = 2,
    kMoneyFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // repeated .test1.Student1 Student = 4;
  int student_size() const;
  private:
  int _internal_student_size() const;
  public:
  void clear_student();
  ::test1::Student1* mutable_student(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test1::Student1 >*
      mutable_student();
  private:
  const ::test1::Student1& _internal_student(int index) const;
  ::test1::Student1* _internal_add_student();
  public:
  const ::test1::Student1& student(int index) const;
  ::test1::Student1* add_student();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test1::Student1 >&
      student() const;

  // string Name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int64 money = 3;
  void clear_money();
  ::PROTOBUF_NAMESPACE_ID::int64 money() const;
  void set_money(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_money() const;
  void _internal_set_money(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 Id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:test1.Team1)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test1::Student1 > student_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int64 money_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test1_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Student1

// int32 Id = 1;
inline void Student1::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Student1::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Student1::id() const {
  // @@protoc_insertion_point(field_get:test1.Student1.Id)
  return _internal_id();
}
inline void Student1::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Student1::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:test1.Student1.Id)
}

// string Name = 2;
inline void Student1::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Student1::name() const {
  // @@protoc_insertion_point(field_get:test1.Student1.Name)
  return _internal_name();
}
inline void Student1::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:test1.Student1.Name)
}
inline std::string* Student1::mutable_name() {
  // @@protoc_insertion_point(field_mutable:test1.Student1.Name)
  return _internal_mutable_name();
}
inline const std::string& Student1::_internal_name() const {
  return name_.GetNoArena();
}
inline void Student1::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Student1::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:test1.Student1.Name)
}
inline void Student1::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:test1.Student1.Name)
}
inline void Student1::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:test1.Student1.Name)
}
inline std::string* Student1::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Student1::release_name() {
  // @@protoc_insertion_point(field_release:test1.Student1.Name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Student1::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:test1.Student1.Name)
}

// .test1.Sex1 Sex = 3;
inline void Student1::clear_sex() {
  sex_ = 0;
}
inline ::test1::Sex1 Student1::_internal_sex() const {
  return static_cast< ::test1::Sex1 >(sex_);
}
inline ::test1::Sex1 Student1::sex() const {
  // @@protoc_insertion_point(field_get:test1.Student1.Sex)
  return _internal_sex();
}
inline void Student1::_internal_set_sex(::test1::Sex1 value) {
  
  sex_ = value;
}
inline void Student1::set_sex(::test1::Sex1 value) {
  _internal_set_sex(value);
  // @@protoc_insertion_point(field_set:test1.Student1.Sex)
}

// -------------------------------------------------------------------

// Team1

// int32 Id = 1;
inline void Team1::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Team1::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Team1::id() const {
  // @@protoc_insertion_point(field_get:test1.Team1.Id)
  return _internal_id();
}
inline void Team1::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Team1::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:test1.Team1.Id)
}

// string Name = 2;
inline void Team1::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Team1::name() const {
  // @@protoc_insertion_point(field_get:test1.Team1.Name)
  return _internal_name();
}
inline void Team1::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:test1.Team1.Name)
}
inline std::string* Team1::mutable_name() {
  // @@protoc_insertion_point(field_mutable:test1.Team1.Name)
  return _internal_mutable_name();
}
inline const std::string& Team1::_internal_name() const {
  return name_.GetNoArena();
}
inline void Team1::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Team1::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:test1.Team1.Name)
}
inline void Team1::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:test1.Team1.Name)
}
inline void Team1::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:test1.Team1.Name)
}
inline std::string* Team1::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Team1::release_name() {
  // @@protoc_insertion_point(field_release:test1.Team1.Name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Team1::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:test1.Team1.Name)
}

// int64 money = 3;
inline void Team1::clear_money() {
  money_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Team1::_internal_money() const {
  return money_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Team1::money() const {
  // @@protoc_insertion_point(field_get:test1.Team1.money)
  return _internal_money();
}
inline void Team1::_internal_set_money(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  money_ = value;
}
inline void Team1::set_money(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_money(value);
  // @@protoc_insertion_point(field_set:test1.Team1.money)
}

// repeated .test1.Student1 Student = 4;
inline int Team1::_internal_student_size() const {
  return student_.size();
}
inline int Team1::student_size() const {
  return _internal_student_size();
}
inline void Team1::clear_student() {
  student_.Clear();
}
inline ::test1::Student1* Team1::mutable_student(int index) {
  // @@protoc_insertion_point(field_mutable:test1.Team1.Student)
  return student_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test1::Student1 >*
Team1::mutable_student() {
  // @@protoc_insertion_point(field_mutable_list:test1.Team1.Student)
  return &student_;
}
inline const ::test1::Student1& Team1::_internal_student(int index) const {
  return student_.Get(index);
}
inline const ::test1::Student1& Team1::student(int index) const {
  // @@protoc_insertion_point(field_get:test1.Team1.Student)
  return _internal_student(index);
}
inline ::test1::Student1* Team1::_internal_add_student() {
  return student_.Add();
}
inline ::test1::Student1* Team1::add_student() {
  // @@protoc_insertion_point(field_add:test1.Team1.Student)
  return _internal_add_student();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test1::Student1 >&
Team1::student() const {
  // @@protoc_insertion_point(field_list:test1.Team1.Student)
  return student_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace test1

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::test1::Sex1> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::test1::Sex1>() {
  return ::test1::Sex1_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_test1_2eproto
